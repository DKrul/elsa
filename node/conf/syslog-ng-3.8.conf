@version: 3.8
@module mod-java
@include "scl.conf"

options {
  threaded(yes);
};

source s_syslog {
  syslog();
};

source s_network {
  # no-multi-line means parse message as-is, newlines included, to allow for multi-line messages
  tcp(flags(no-multi-line));
  udp(flags(no-multi-line));
};

python {
import socket
import ujson as json
ignore_list = set(["HOST", "HOST_FROM", "SOURCE", "MESSAGE", "LEGACY_MSGHDR", "PROGRAM", "FILENAME"])
def elsa_formatter(logmsg, msgjson):
  msgjson = json.loads(msgjson)
  ret = {
    "class": msgjson["_classifier"]["class"],
    "rule_id": msgjson["_classifier"].get("rule_id", 0),
    "@message": logmsg.MESSAGE,
    "@timestamp": logmsg.R_UNIXTIME,
    "program": logmsg.PROGRAM,
    "header": logmsg.LEGACY_MSGHDR,
    "host": logmsg.HOST
  }
  for k, v in msgjson.iteritems():
    if k == "_classifier" or k in ignore_list:
      continue
    ret[k.lower()] = v
  return json.dumps(ret)
};

block parser elsa_formatter(template("$(format-json --scope all-nv-pairs)")){
  json-parser(template("$(python elsa_formatter `template`)"));
};

destination d_test {
  file("/dev/stdout"
    template("$(format-json -s nv-pairs --pair _index=elsa-${YEAR}-${MONTH}-${DAY} --pair _type=events)\n")
  );
};
 
destination d_elsa {
  program("python /opt/elsa/node/elsa.py /etc/elsa.conf"
    template("$(format-json -s all-nv-pairs --pair @timestamp=${R_UNIXTIME} --pair _index=elsa-${YEAR}-${MONTH}-${DAY} --pair _type=events)\n")
  );
};

log {
  source(s_syslog);
  source(s_network);
  parser { db-parser(file("/opt/elsa/node/conf/patterndb.xml")); };
  parser { elsa_formatter(); };
  #destination(d_test);
  destination(d_elsa);
};
